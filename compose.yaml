services:

  api:
    container_name: reservation_api
    restart: always
    build: 
      context: ./api
      dockerfile: Dockerfile.api
      args:
        - NODE_ENV=development
    env_file:
      - .env
    environment:
      - NODE_ENV=development
    ports:
      - ${PORT}:${PORT}
    expose:
      - ${PORT}
    depends_on:
      - db
    volumes:
      - ./api:/usr/src/app/

  db:
    container_name: reservation_database
    restart: always
    image: postgres
    build: 
      context: ./database
      dockerfile: Dockerfile.db
    ports:
      - '5433:${DB_PORT}'
    environment:
      - PGUSER=${DB_USER}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - data:/data/db
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    depends_on:
        - db
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"

volumes:
  data: {}
  docker-entrypoint-initdb.d:

